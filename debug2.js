import { Telegraf } from 'telegraf';
import dotenv from 'dotenv';
import path from 'path';
import { fileURLToPath } from 'url';

// Get the directory of the current file
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Load environment variables with explicit path
const envResult = dotenv.config({ path: path.join(__dirname, '.env') });
console.log('üîß Dotenv result:', envResult);

console.log('üîß Environment check:');
console.log('Current working directory:', process.cwd());
console.log('Script directory:', __dirname);
console.log('TELEGRAM_BOT_TOKEN exists:', !!process.env.TELEGRAM_BOT_TOKEN);
console.log('Token length:', process.env.TELEGRAM_BOT_TOKEN?.length);
console.log('WEB_APP_URL:', process.env.WEB_APP_URL);

// Check if env file exists
import fs from 'fs';
const envPath = path.join(__dirname, '.env');
console.log('Env file exists:', fs.existsSync(envPath));
if (fs.existsSync(envPath)) {
  console.log('Env file content:', fs.readFileSync(envPath, 'utf8'));
}

// If token still not loaded, exit early
if (!process.env.TELEGRAM_BOT_TOKEN) {
  console.error('‚ùå Bot token not found. Exiting...');
  process.exit(1);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);

// URL –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (Vercel)
const WEB_APP_URL = process.env.WEB_APP_URL || 'https://tlbot-jr021tfee-eskimos-projects.vercel.app';

console.log('ü§ñ Starting Telegram bot...');
console.log('üì± Web App URL:', WEB_APP_URL);

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
bot.use(async (ctx, next) => {
  console.log('üì• Received update:', JSON.stringify(ctx.update, null, 2));
  await next();
});

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.start(async (ctx) => {
  try {
    console.log('üì® /start command from:', ctx.from.username || ctx.from.first_name);
    
    const welcome = `–ô–æ—É, –ü—Ä–∏–≤–µ—Ç! üëã –≠—Ç–æ Total Lookas ‚Äî –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞. –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å–æ–±–µ—Ä—ë—Ç –ö–ü –∑–∞ –ø–∞—Ä—É –º–∏–Ω—É—Ç: –æ—Ç —Ñ—É—Ç–±–æ–ª–æ–∫ –∏ —Ö—É–¥–∏ –¥–æ –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤ –∏ —É–ø–∞–∫–æ–≤–∫–∏.

–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:`;

    const keyboard = {
      inline_keyboard: [
        [{ text: 'ÔøΩ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: WEB_APP_URL } }],
        [{ text: 'üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏', callback_data: 'contact' }],
        [{ text: '‚ÑπÔ∏è –û –Ω–∞—Å', callback_data: 'about' }]
      ]
    };

    await ctx.reply(welcome, { reply_markup: keyboard });
    console.log('‚úÖ Welcome message sent');
  } catch (error) {
    console.error('‚ùå Error in start command:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /webapp
bot.command('webapp', async (ctx) => {
  try {
    console.log('üì® /webapp command from:', ctx.from.username || ctx.from.first_name);
    
    const keyboard = {
      inline_keyboard: [
        [{ text: 'ÔøΩ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ TL', web_app: { url: WEB_APP_URL } }]
      ]
    };
    
    await ctx.reply('–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥:', { reply_markup: keyboard });
    console.log('‚úÖ Webapp message sent');
  } catch (error) {
    console.error('‚ùå Error in webapp command:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –ö–Ω–æ–ø–∫–∞ "–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏"
bot.action('contact', async (ctx) => {
  try {
    console.log('üì® Contact action from:', ctx.from.username || ctx.from.first_name);
    await ctx.answerCbQuery();
    
    const contactText = `üìû –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏:

–ú–µ–Ω–µ–¥–∂–µ—Ä: @zelenayaaliya
–¢–µ–ª–µ—Ñ–æ–Ω: +79991627758
Email: total-lookas@yandex.ru
–°–∞–π—Ç: totallookas.ru`;

    const backKeyboard = {
      inline_keyboard: [
        [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
      ]
    };

    await ctx.editMessageText(contactText, { reply_markup: backKeyboard });
    console.log('‚úÖ Contact info sent');
  } catch (error) {
    console.error('‚ùå Error in contact action:', error);
    await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
  }
});

// –ö–Ω–æ–ø–∫–∞ "–û –Ω–∞—Å"
bot.action('about', async (ctx) => {
  try {
    console.log('üì® About action from:', ctx.from.username || ctx.from.first_name);
    await ctx.answerCbQuery();
    
    const aboutText = `‚ÑπÔ∏è –û Total Lookas:

Total Lookas ‚Äî –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞, —Å 2017 –≥–æ–¥–∞ –ø—Ä–µ–≤—Ä–∞—â–∞—é—â–µ–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ä—á –≤ –∞—Ä—Ç-–æ–±—ä–µ–∫—Ç—ã. –ú—ã –æ–±—ä–µ–¥–∏–Ω—è–µ–º –¥–µ—Ä–∑–∫–∏–π —Å—Ç–∏–ª—å –î–∏–Ω–∞—Ä–∞ –Ø—Ä–º—É—Ö–∞–º–µ—Ç–æ–≤–∞ —Å –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–º —Å–µ—Ä–≤–∏—Å–æ–º: –±–µ—Ä—ë–º –Ω–∞ —Å–µ–±—è –≤—Å—ë ‚Äî –æ—Ç –∏–¥–µ–∏ –∏ –¥–∏–∑–∞–π–Ω–∞ –¥–æ –ª–µ–∫–∞–ª, –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –∏ –ª–æ–≥–∏—Å—Ç–∏–∫–∏, –≤ —Å—Ä–µ–¥–Ω–µ–º –∑–∞ 20 –¥–Ω–µ–π. 

–ù–∞—à –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –æ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –≤—Å—ë –æ—Ç —Ñ—É—Ç–±–æ–ª–æ–∫ –∏ —Ö—É–¥–∏ –¥–æ —é–≤–µ–ª–∏—Ä–Ω—ã—Ö –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤, –ø–æ–∑–≤–æ–ª—è—è –∫–ª–∏–µ–Ω—Ç–∞–º ¬´–ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–¥–µ—Ç—å¬ª –±—Ä–µ–Ω–¥ –∏ –≤—ã–¥–µ–ª–∏—Ç—å—Å—è –Ω–∞ —Ä—ã–Ω–∫–µ. –ù–∞–º –¥–æ–≤–µ—Ä—è—é—Ç —Ñ–µ—Å—Ç–∏–≤–∞–ª–∏, –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏–∏, –∞—Ä—Ç–∏—Å—Ç—ã –∏ –±–ª–æ–≥–µ—Ä—ã, –ø–æ—Ç–æ–º—É —á—Ç–æ ¬´–º—ã –º–æ–∂–µ–º –≤—Å—ë¬ª ‚Äî –±—ã—Å—Ç—Ä–æ, —Å–º–µ–ª–æ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ.`;

    const backKeyboard = {
      inline_keyboard: [
        [{ text: 'ÔøΩ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'back_to_menu' }]
      ]
    };

    await ctx.editMessageText(aboutText, { reply_markup: backKeyboard });
    console.log('‚úÖ About info sent');
  } catch (error) {
    console.error('‚ùå Error in about action:', error);
    await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
  }
});

// –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
bot.action('back_to_menu', async (ctx) => {
  try {
    console.log('üì® Back to menu action from:', ctx.from.username || ctx.from.first_name);
    await ctx.answerCbQuery();
    
    const welcome = `–ô–æ—É, –ü—Ä–∏–≤–µ—Ç! üëã –≠—Ç–æ Total Lookas ‚Äî –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞. –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å–æ–±–µ—Ä—ë—Ç –ö–ü –∑–∞ –ø–∞—Ä—É –º–∏–Ω—É—Ç: –æ—Ç —Ñ—É—Ç–±–æ–ª–æ–∫ –∏ —Ö—É–¥–∏ –¥–æ –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤ –∏ —É–ø–∞–∫–æ–≤–∫–∏.

–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:`;

    const keyboard = {
      inline_keyboard: [
        [{ text: 'üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: WEB_APP_URL } }],
        [{ text: 'üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏', callback_data: 'contact' }],
        [{ text: '‚ÑπÔ∏è –û –Ω–∞—Å', callback_data: 'about' }]
      ]
    };

    await ctx.editMessageText(welcome, { reply_markup: keyboard });
    console.log('‚úÖ Back to menu');
  } catch (error) {
    console.error('‚ùå Error in back to menu action:', error);
    await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
bot.on('web_app_data', async (ctx) => {
  try {
    console.log('üì® Web app data from:', ctx.from.username || ctx.from.first_name);
    console.log('üîç Full context:', JSON.stringify(ctx.update, null, 2));
    
    const webAppData = ctx.webAppData?.data;
    
    if (webAppData) {
      console.log('üíæ Web app data received:', webAppData);
      try {
        const parsedData = JSON.parse(webAppData);
        console.log('üìä Parsed data:', JSON.stringify(parsedData, null, 2));
      } catch (parseError) {
        console.log('‚ùå Failed to parse web app data:', parseError);
      }
      await ctx.reply('‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.');
    } else {
      console.log('‚ö†Ô∏è No web app data found in context');
    }
  } catch (error) {
    console.error('‚ùå Error processing web app data:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
  console.error('‚ùå Bot error:', err);
  console.error('Context:', ctx.update);
});

// Graceful shutdown
process.once('SIGINT', () => {
  console.log('üõë Stopping bot...');
  bot.stop('SIGINT');
});

process.once('SIGTERM', () => {
  console.log('üõë Stopping bot...');
  bot.stop('SIGTERM');
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
async function startBot() {
  try {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await bot.launch();
    console.log('üöÄ Bot started successfully!');
    const me = await bot.telegram.getMe();
    console.log('Bot username:', me.username);
    console.log('Bot ID:', me.id);
  } catch (error) {
    console.error('‚ùå Failed to start bot:', error);
    process.exit(1);
  }
}

startBot();
