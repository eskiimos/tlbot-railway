import { Telegraf } from 'telegraf';
import dotenv from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ (–±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);

// URL –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (Vercel)
const WEB_APP_URL = process.env.WEB_APP_URL || 'https://tlbot-jr021tfee-eskimos-projects.vercel.app';

console.log('ü§ñ Starting Telegram bot...');
console.log('üì± Web App URL:', WEB_APP_URL);

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.start(async (ctx) => {
  try {
    console.log('üì® /start command from:', ctx.from.username || ctx.from.first_name);
    
    const welcome = `–ü—Ä–∏–≤–µ—Ç! üëã
    
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TL Bot! 
–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å:

üõçÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—à –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤
üì± –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏

–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:`;

    const keyboard = {
      inline_keyboard: [
        [{ text: 'üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥', web_app: { url: WEB_APP_URL } }],
        [{ text: 'üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏', callback_data: 'contact' }],
        [{ text: '‚ÑπÔ∏è –û –Ω–∞—Å', callback_data: 'about' }]
      ]
    };

    await ctx.reply(welcome, { reply_markup: keyboard });
    console.log('‚úÖ Welcome message sent');
  } catch (error) {
    console.error('‚ùå Error in start command:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /webapp
bot.command('webapp', async (ctx) => {
  try {
    console.log('üì® /webapp command from:', ctx.from.username || ctx.from.first_name);
    
    const keyboard = {
      inline_keyboard: [
        [{ text: 'üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥ TL', web_app: { url: WEB_APP_URL } }]
      ]
    };
    
    await ctx.reply('–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥:', { reply_markup: keyboard });
    console.log('‚úÖ Webapp message sent');
  } catch (error) {
    console.error('‚ùå Error in webapp command:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –ö–Ω–æ–ø–∫–∞ "–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏"
bot.action('contact', async (ctx) => {
  try {
    console.log('üì® Contact action from:', ctx.from.username || ctx.from.first_name);
    await ctx.answerCbQuery();
    await ctx.reply('üìû –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏:\n\nüìß Email: info@tl-clothing.com\nüì± Telegram: @tl_support\nüåê –°–∞–π—Ç: tl-clothing.com');
    console.log('‚úÖ Contact info sent');
  } catch (error) {
    console.error('‚ùå Error in contact action:', error);
    await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
  }
});

// –ö–Ω–æ–ø–∫–∞ "–û –Ω–∞—Å"
bot.action('about', async (ctx) => {
  try {
    console.log('üì® About action from:', ctx.from.username || ctx.from.first_name);
    await ctx.answerCbQuery();
    await ctx.reply('‚ÑπÔ∏è –û TL Clothing:\n\n–ú—ã —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –æ–¥–µ–∂–¥—ã. –ù–∞—à–∞ –º–∏—Å—Å–∏—è - –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞–º –∫–æ–º—Ñ–æ—Ä—Ç–Ω—É—é –∏ —Å—Ç–∏–ª—å–Ω—É—é –æ–¥–µ–∂–¥—É –ø–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º —Ü–µ–Ω–∞–º.\n\nüéØ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –∫–∞–∂–¥–æ–º—É –∑–∞–∫–∞–∑—É\n‚ö° –ë—ã—Å—Ç—Ä–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ\nüíØ –ì–∞—Ä–∞–Ω—Ç–∏—è –∫–∞—á–µ—Å—Ç–≤–∞');
    console.log('‚úÖ About info sent');
  } catch (error) {
    console.error('‚ùå Error in about action:', error);
    await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
bot.on('web_app_data', async (ctx) => {
  try {
    console.log('üì® Web app data from:', ctx.from.username || ctx.from.first_name);
    
    const webAppData = ctx.webAppData?.data;
    
    if (webAppData) {
      console.log('üíæ Web app data received:', webAppData);
      await ctx.reply('‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.');
    }
  } catch (error) {
    console.error('‚ùå Error processing web app data:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
  console.error('‚ùå Bot error:', err);
  console.error('Context:', ctx.update);
});

// Graceful shutdown
process.once('SIGINT', () => {
  console.log('üõë Stopping bot...');
  bot.stop('SIGINT');
});

process.once('SIGTERM', () => {
  console.log('üõë Stopping bot...');
  bot.stop('SIGTERM');
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
async function startBot() {
  try {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await bot.launch();
    console.log('üöÄ Bot started successfully!');
    const me = await bot.telegram.getMe();
    console.log('Bot username:', me.username);
    console.log('Bot ID:', me.id);
  } catch (error) {
    console.error('‚ùå Failed to start bot:', error);
    process.exit(1);
  }
}

startBot();
