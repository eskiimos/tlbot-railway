import { Telegraf } from 'telegraf';
import { PrismaClient } from '@prisma/client';
import dotenv from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Prisma –∏ –±–æ—Ç–∞
const prisma = new PrismaClient();
const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);

// URL –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (Vercel)
const WEB_APP_URL = process.env.WEB_APP_URL || 'https://tlbot-wine.vercel.app';

console.log('ü§ñ Starting Telegram bot...');
console.log('üì± Web App URL:', WEB_APP_URL);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function upsertUser(telegramUser) {
  try {
    const userDataForDb = {
      telegramId: telegramUser.id.toString(),
      username: telegramUser.username || null,
      firstName: telegramUser.first_name || null,
      lastName: telegramUser.last_name || null,
      language: telegramUser.language_code || null,
    };

    const user = await prisma.user.upsert({
      where: { telegramId: userDataForDb.telegramId },
      update: userDataForDb,
      create: userDataForDb,
    });

    return user;
  } catch (error) {
    console.error('‚ùå Error upserting user:', error);
    return null;
  }
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.start(async (ctx) => {
  try {
    console.log('üì® /start command from:', ctx.from.username || ctx.from.first_name);
    
    const user = await upsertUser(ctx.from);
    console.log('üë§ User upserted:', user.id);
    
    const welcome = `–ô–æ—É, –ü—Ä–∏–≤–µ—Ç! üëã 

–≠—Ç–æ Total Lookas ‚Äî –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞.

–ú—ã —Å–æ–∑–¥–∞—ë–º –±—Ä–µ–Ω–¥–∏–Ω–≥, –¥–∏–∑–∞–π–Ω –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –±–∏–∑–Ω–µ—Å–∞ –∏ —á–∞—Å—Ç–Ω—ã—Ö –ª–∏—Ü.

–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:`;

    const keyboard = {
      inline_keyboard: [
        [{ text: 'ÔøΩ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: WEB_APP_URL } }],
        [{ text: 'üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏', callback_data: 'contact' }],
        [{ text: '‚ÑπÔ∏è –û –Ω–∞—Å', callback_data: 'about' }]
      ]
    };

    await ctx.reply(welcome, { reply_markup: keyboard });
    console.log('‚úÖ Welcome message sent');
  } catch (error) {
    console.error('‚ùå Error in start command:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /webapp
bot.command('webapp', async (ctx) => {
  try {
    console.log('üì® /webapp command from:', ctx.from.username || ctx.from.first_name);
    
    const user = await upsertUser(ctx.from);
    
    const keyboard = {
      inline_keyboard: [
        [{ text: 'ÔøΩ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: WEB_APP_URL } }]
      ]
    };
    
    await ctx.reply('–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥:', { reply_markup: keyboard });
    console.log('‚úÖ Webapp message sent');
  } catch (error) {
    console.error('‚ùå Error in webapp command:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –ö–Ω–æ–ø–∫–∞ "–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏"
bot.action('contact', async (ctx) => {
  try {
    console.log('üì® Contact action from:', ctx.from.username || ctx.from.first_name);
    await ctx.answerCbQuery();
    await ctx.reply('üìû –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏:\n\nÔøΩ –ú–µ–Ω–µ–¥–∂–µ—Ä: @zelenayaaliya\nüì± –¢–µ–ª–µ—Ñ–æ–Ω: +79991627758\nÔøΩüìß Email: total-lookas@yandex.ru\nüåê –°–∞–π—Ç: totallookas.ru');
    console.log('‚úÖ Contact info sent');
  } catch (error) {
    console.error('‚ùå Error in contact action:', error);
    await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
  }
});

// –ö–Ω–æ–ø–∫–∞ "–û –Ω–∞—Å"
bot.action('about', async (ctx) => {
  try {
    console.log('üì® About action from:', ctx.from.username || ctx.from.first_name);
    await ctx.answerCbQuery();
    await ctx.reply('‚ÑπÔ∏è –û Total Lookas:\n\n–ú—ã ‚Äî –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–µ–µ—Å—è –Ω–∞ –±—Ä–µ–Ω–¥–∏–Ω–≥–µ, –¥–∏–∑–∞–π–Ω–µ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö –¥–ª—è –±–∏–∑–Ω–µ—Å–∞ –∏ —á–∞—Å—Ç–Ω—ã—Ö –ª–∏—Ü.\n\nÔøΩ –ë—Ä–µ–Ω–¥–∏–Ω–≥ –∏ –¥–∏–∑–∞–π–Ω\nüëï –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–¥–µ–∂–¥–∞\n‚ö° –ë—ã—Å—Ç—Ä–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ\nüíØ –ö–∞—á–µ—Å—Ç–≤–æ –∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥');
    console.log('‚úÖ About info sent');
  } catch (error) {
    console.error('‚ùå Error in about action:', error);
    await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
bot.on('web_app_data', async (ctx) => {
  try {
    console.log('üì® Web app data from:', ctx.from.username || ctx.from.first_name);
    
    const user = await upsertUser(ctx.from);
    const webAppData = ctx.webAppData?.data;
    
    if (webAppData) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É
      await prisma.webAppData.create({
        data: {
          userId: user.id,
          data: JSON.parse(webAppData),
        },
      });
      
      console.log('üíæ Web app data saved for user:', user.id);
      await ctx.reply('‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.');
    }
  } catch (error) {
    console.error('‚ùå Error processing web app data:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
  console.error('‚ùå Bot error:', err);
  console.error('Context:', ctx.update);
});

// Graceful shutdown
process.once('SIGINT', () => {
  console.log('üõë Stopping bot...');
  bot.stop('SIGINT');
  prisma.$disconnect();
});

process.once('SIGTERM', () => {
  console.log('üõë Stopping bot...');
  bot.stop('SIGTERM');
  prisma.$disconnect();
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
async function startBot() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await prisma.$connect();
    console.log('‚úÖ Database connected');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await bot.launch();
    console.log('üöÄ Bot started successfully!');
    console.log('Bot username:', (await bot.telegram.getMe()).username);
  } catch (error) {
    console.error('‚ùå Failed to start bot:', error);
    process.exit(1);
  }
}

startBot();
